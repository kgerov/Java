package _02_LevShop;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

public class Tester {
	
	public static void main(String[] args) throws ParseException {
		DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Date date = formatter.parse("15/01/2016");
		
		FoodProduct cigars = new FoodProduct("420 Blaze it fgt", 6.90, 1400, AgeRestriction.ADAULT, date);
		Customer pecata = new Customer("Pecata", 17, 30.00);
		Customer gopeto = new Customer("Gopeto", 18, 0.44);
		
		try {
			PurchaseManager.processPurchase(pecata, cigars);
		} catch (AgeRestrictionException e) {
			System.out.println("You are too young to buy this product!");
		} catch (Exception e) {
			System.out.println("Other");
		}
		
		try {
			PurchaseManager.processPurchase(gopeto, cigars);
		} catch (NotEnoughMoneyException e) {
			System.out.println("You do not have enough money to buy this product!");
		} catch (Exception e) {
			System.out.println("Other");
		}
		
		List<Product> products = new ArrayList<Product>();
		
		products.add(new FoodProduct("Kola", 5.00, 10, AgeRestriction.NONE, date));
		products.add(new FoodProduct("Koka kola", 1.10, 2, AgeRestriction.TEEN, date));
		products.add(new FoodProduct("Swag", 0.79, 111, AgeRestriction.ADAULT, date));
		products.add(new Computer("Banica", 699.90, 20, AgeRestriction.NONE));
		products.add(new Appliance("Sirene", 299.90, 60, AgeRestriction.ADAULT));
		
		Comparator<Product> byDateOfExpiry = (p1, p2) -> Long.compare(
				((FoodProduct) p1).getDaysUntilExpiry(), ((FoodProduct) p2).getDaysUntilExpiry());
		Comparator<Product> byPrice = (p1, p2) -> p1.getPrice().compareTo(p2.getPrice());
		
		Product expirableProduct = products.stream()
				.filter(p -> p instanceof Expirable)
				.sorted(byDateOfExpiry)
				.findFirst()
				.get();
		
		System.out.println(expirableProduct);
		System.out.println("\n ----------------");
		
		List<Product> adultAgerestrictionByPrice = products.stream()
				.filter(p -> p.ageRestrictionLevel == AgeRestriction.Adult)
				.sorted(byPrice)
				.collect(Collectors.toList());
		
		for (Product product : adultAgerestrictionByPrice) {
			System.out.println(product + "\n");
		}
	}

}
